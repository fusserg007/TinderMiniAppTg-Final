services:
  mongo:
    image: mongo:4.4.18
    container_name: tinder_mongo
    restart: always
    env_file:
      - .env
    volumes:
      - mongo_data:/data/db
      - ./mongo/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro
    networks:
      - tinder_network

  object-storage:
    image: bitnami/minio:latest
    container_name: tinder_minio
    restart: always
    environment:
      - MINIO_ROOT_USER=kundin
      - MINIO_ROOT_PASSWORD=very-secret-password
      - MINIO_SKIP_CLIENT=yes
    volumes:
      - minio_storage:/data
    networks:
      - tinder_network

  imgproxy:
    image: darthsim/imgproxy
    container_name: tinder_imgproxy
    restart: always
    env_file:
      - .env
    environment:
      - IMGPROXY_USE_S3=true
      - IMGPROXY_S3_ENDPOINT=http://object-storage:9000
    networks:
      - tinder_network
    depends_on:
      - object-storage

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tinder_backend
    restart: always
    env_file:
      - .env
    environment:
      - PORT=4000
      - AWS_ENDPOINT=http://object-storage:9000
      - NODE_ENV=production
    networks:
      - tinder_network
    depends_on:
      - mongo
      - object-storage

  frontend:
    build:
      context: ./tg-web-app
      dockerfile: Dockerfile
      args:
        - VITE_BACKEND_URL=https://tindertgminiapp.shop/api
    container_name: tinder_frontend
    restart: always
    env_file:
      - .env
    environment:
      - PORT=5173
      - VITE_BACKEND_URL=https://tindertgminiapp.shop/api
      - IMGPROXY_URL=https://tindertgminiapp.shop/imgproxy
      - AWS_BUCKET=at-first-sight
    networks:
      - tinder_network
    depends_on:
      - backend
      - imgproxy

  nginx:
    image: nginx:alpine
    container_name: tinder_nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    networks:
      - tinder_network
    depends_on:
      - frontend
      - backend

  certbot:
    image: certbot/certbot
    container_name: tinder_certbot
    restart: unless-stopped
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: /bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'

volumes:
  mongo_data:
  minio_storage:

networks:
  tinder_network:
    driver: bridge
